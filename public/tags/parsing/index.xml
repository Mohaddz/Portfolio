<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parsing on AI Blog</title>
    <link>http://localhost:1313/tags/parsing/</link>
    <description>Recent content in Parsing on AI Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 May 2023 10:00:00 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/parsing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Lexical Analyzer and SLR Parser in Java</title>
      <link>http://localhost:1313/projects/compiler/</link>
      <pubDate>Sun, 21 May 2023 10:00:00 +0300</pubDate>
      <guid>http://localhost:1313/projects/compiler/</guid>
      <description>Introduction In the realm of compiler design, two crucial components stand out: the Lexical Analyzer and the Parser. This project dives deep into implementing both, using Java as our weapon of choice. Let&amp;rsquo;s embark on this journey of transforming raw code into meaningful structures!&#xA;Part 1: The Lexical Analyzer What is a Lexical Analyzer? A lexical analyzer, often called a scanner or tokenizer, is the first phase of a compiler.</description>
    </item>
  </channel>
</rss>
